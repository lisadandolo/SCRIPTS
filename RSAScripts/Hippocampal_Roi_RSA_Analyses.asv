
clear;
clc


userOptions = defineUserOptions;
userOptions.analysisName = 'Hippocampal_ROIs';   %% Name of Analysis
userOptions.rootPath = 'C:/Users/penv395/Desktop/transMem/fMRI_study/Results/fMRI/DATA/Control/Results_RSA/Hippocampal';  %where results will be saved

userOptions.subjectNames = {'VP33'   'VP34'   'VP35'    'VP36' };%   'VP37'    'VP38'    'VP39'  ...  
                            %'VP40'    'VP41'    'VP42'    'VP43'    'VP44'    'VP45'    'VP46'   ... 
                           % 'VP47'    'VP48'    'VP49'    'VP50'    'VP51'    'VP52'    'VP53'   ... 
                           % 'VP54'    'VP55'    'VP56'    'VP57'    'VP58'    'VP59'    'VP60'    ...
                           % 'VP61'    'VP62'    'VP63'    'VP64'    'VP65'    'VP66'    'VP67'   ... 
                           % 'VP68'    'VP69'    'VP70'    'VP71'    'VP72'    'VP73'    'VP74'   ... 
                           % 'VP75'    'VP76'    'VP77'    'VP78'    'VP79'    'VP80'};

userOptions.maskNames = {'Left_EntorhinalCortex' 'Left_ParahippocampalGyrus' 'Left_Hippocampus'}; %'Left_AnteriorHC'        'Left_MiddleHC'    ...
                              % 'Left_PosteriorHC'    ...
                            %'Right_AnteriorHC'   'Right_EntorhinalCortex'    'Right_MiddleHC'   ...
                            %'Right_ParahippocampalGyrus'    'Right_PosteriorHC'};
userOptions.maskPath = 'C:/Users/penv395/Desktop/transMem/fMRI_study/Results/fMRI/SCRIPTS/Masken/ROIS_RSA_Analysis/[[maskName]].nii';

userOptions.conditionLabels = { 'Old_Neg1'    'Old_Neg2'    'Old_Neg3'    'Old_Neg4'    'Old_Neg5'    ...
                                'Old_Neg6'    'Old_Neg7'    'Old_Neg8'    'Old_Neg9'    'Old_Neg10'    ...
                                'Old_Neg11'   'Old_Neg12'   'Old_Neg13'   'Old_Neg14'   'Old_Neg15'   ...
                                'Old_Neg16'   'Old_Neg17'   'Old_Neg18'   'Old_Neg19'   'Old_Neg20'    ...
                                'Old_Neg21'   'Old_Neg22'   'Old_Neg23'   'Old_Neg24'   'Old_Neg25'  ...
                                'Old_Neg26'   'Old_Neg27'   'Old_Neg28'   'Old_Neg29'   'Old_Neg30'  ...
                                'Old_Neut1'   'Old_Neut2'   'Old_Neut3'   'Old_Neut4'   'Old_Neut5'   ...
                                'Old_Neut6'   'Old_Neut7'   'Old_Neut8'   'Old_Neut9'   'Old_Neut10' ...
                                'Old_Neut11'  'Old_Neut12'  'Old_Neut13'  'Old_Neut14'  'Old_Neut15'  ...
                                'Old_Neut16'  'Old_Neut17'  'Old_Neut18'  'Old_Neut19'  'Old_Neut20' ...
                                'Old_Neut21'  'Old_Neut22'  'Old_Neut23'  'Old_Neut24'  'Old_Neut25'  ...
                                'Old_Neut26'  'Old_Neut27'  'Old_Neut28'  'Old_Neut29'  'Old_Neut30' ...
                                'Sim_Neg1'    'Sim_Neg2'    'Sim_Neg3'    'Sim_Neg4'    'Sim_Neg5'  ...
                                'Sim_Neg6'    'Sim_Neg7'    'Sim_Neg8'    'Sim_Neg9'    'Sim_Neg10'  ...
                                'Sim_Neg11'   'Sim_Neg12'   'Sim_Neg13'   'Sim_Neg14'   'Sim_Neg15'   ...
                                'Sim_Neg16'   'Sim_Neg17'   'Sim_Neg18'   'Sim_Neg19'   'Sim_Neg20'   ...
                                'Sim_Neg21'   'Sim_Neg22'   'Sim_Neg23'   'Sim_Neg24'   'Sim_Neg25'  ...
                                'Sim_Neg26'   'Sim_Neg27'   'Sim_Neg28'   'Sim_Neg29'   'Sim_Neg30'  ...
                                'Sim_Neut1'   'Sim_Neut2'   'Sim_Neut3'   'Sim_Neut4'   'Sim_Neut5'    ...
                                'Sim_Neut6'   'Sim_Neut7'   'Sim_Neut8'   'Sim_Neut9'   'Sim_Neut10'   ...
                                'Sim_Neut11'  'Sim_Neut12'  'Sim_Neut13'  'Sim_Neut14'  'Sim_Neut15'  ...
                                'Sim_Neut16'  'Sim_Neut17'  'Sim_Neut18'  'Sim_Neut19'  'Sim_Neut20' ...
                                'Sim_Neut21'  'Sim_Neut22'  'Sim_Neut23'  'Sim_Neut24'  'Sim_Neut25'  ...
                                'Sim_Neut26'  'Sim_Neut27'  'Sim_Neut28'  'Sim_Neut29'  'Sim_Neut30' ...
                                'Nov_Neg1'    'Nov_Neg2'    'Nov_Neg3'    'Nov_Neg4'    'Nov_Neg5'  ...
                                'Nov_Neg6'    'Nov_Neg7'    'Nov_Neg8'    'Nov_Neg9'    'Nov_Neg10' ...
                                'Nov_Neg11'   'Nov_Neg12'   'Nov_Neg13'   'Nov_Neg14'   'Nov_Neg15'  ...
                                'Nov_Neg16'   'Nov_Neg17'   'Nov_Neg18'   'Nov_Neg19'   'Nov_Neg20'  ...
                                'Nov_Neg21'   'Nov_Neg22'   'Nov_Neg23'   'Nov_Neg24'   'Nov_Neg25'  ...
                                'Nov_Neg26'   'Nov_Neg27'   'Nov_Neg28'   'Nov_Neg29'   'Nov_Neg30'   ...
                                'Nov_Neut1'   'Nov_Neut2'   'Nov_Neut3'   'Nov_Neut4'   'Nov_Neut5'  ...
                                'Nov_Neut6'   'Nov_Neut7'   'Nov_Neut8'   'Nov_Neut9'   'Nov_Neut10'  ...
                                'Nov_Neut11'  'Nov_Neut12'  'Nov_Neut13'  'Nov_Neut14'  'Nov_Neut15'  ...
                                'Nov_Neut16'  'Nov_Neut17'  'Nov_Neut18'  'Nov_Neut19'  'Nov_Neut20'  ...
                                'Nov_Neut21'  'Nov_Neut22'  'Nov_Neut23'  'Nov_Neut24'  'Nov_Neut25'   ...
                                'Nov_Neut26'  'Nov_Neut27'  'Nov_Neut28'  'Nov_Neut29'  'Nov_Neut30'};                   
                        
% betaCorrespondence = 'SPM';        


for tr = 1:9
betaCorrespondence(tr).identifier = ['beta_000', num2str(tr),'.nii'];
end
for tr = 10:99
betaCorrespondence(tr).identifier = ['beta_00', num2str(tr),'.nii'];
end
for tr = 100:180
betaCorrespondence(tr).identifier = ['beta_0', num2str(tr),'.nii'];
end

userOptions.betaPath = 'C:/Users/penv395/Desktop/transMem/fMRI_study/Results/fMRI/DATA/Control/Pic_Recog/[[subjectName]]/modelMVPANorm/[[betaIdentifier]]';    


% Load in the fMRI data
fullBrainVols = fMRIDataPreparation(betaCorrespondence, userOptions);

% load in the masks
binaryMasks_nS = fMRIMaskPreparation(userOptions);

responsePatterns = fMRIDataMasking(fullBrainVols, binaryMasks_nS,betaCorrespondence, userOptions);
% 
% %%%%%%%%%%
% %% RDMs %%
% %%%%%%%%%%
% 

RDMs = constructRDMs(responsePatterns, betaCorrespondence, userOptions);

RDMs = averageRDMs_subjectSession(RDMs, 'session');
averageRDMs = averageRDMs_subjectSession(RDMs, 'subject');
% 

% % Prepare the model RDMs.
RDMs_model = constructModelRDMs(makeModelRDMs_Pictures, userOptions);
RDMs_model_behav = constructModelRDMs(makeModelRDMs_basedOnBehavioralData_VersionA, userOptions);
% %%%%%%%%%%%%%%%%%%%%%%%%%%
% %% First-order analysis %%
% %%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% Display the  RDMs: 
all_RDMs = concatenateRDMs(RDMs,averageRDMs);
figureRDMs(all_RDMs, userOptions, struct('fileName', 'RDMs', 'figureNumber', 1));

% % Determine dendrograms for the clustering of the conditions for the two data
% % streams
% [blankConditionLabels{1:size(RDMs_model(1).RDM, 2)}] = deal(' ');
% dendrogramConditions(averageRDMs_true, userOptions_true, struct('titleString', 'Dendrogram of conditions without simulated noise', 'useAlternativeConditionLabels', true, 'alternativeConditionLabels', {blankConditionLabels}, 'figureNumber', 4));
% dendrogramConditions(averageRDMs_noisy, userOptions_noisy, struct('titleString', 'Dendrogram of conditions with simulated noise', 'useAlternativeConditionLabels', true, 'alternativeConditionLabels', {blankConditionLabels}, 'figureNumber', 5));
% % 
% % Display MDS plots for the condition sets for both streams of data
% MDSConditions(averageRDMs_true, userOptions_true, struct('titleString', 'MDS of conditions without simulated noise', 'alternativeConditionLabels', {blankConditionLabels}, 'figureNumber', 6));
% MDSConditions(averageRDMs_noisy, userOptions_noisy, struct('titleString', 'MDS of conditions with simulated noise', 'alternativeConditionLabels', {blankConditionLabels}, 'figureNumber', 7));
% % 
% %%%%%%%%%%%%%%%%%%%%%%%%%%%
% %% Second-order analysis %%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
%Display a second-order simmilarity matrix for the models and the true and noisy simulated pattern RDMs
pairwiseCorrelateRDMs({RDMs,averageRDMs, RDMs_model_behav(1:4)}, userOptions, struct('figureNumber', 2));
% 
% % Plot all RDMs on a MDS plot to visualise pairwise distances.
MDSRDMs({RDMs, RDMs_model_behav(1:4)}, userOptions, struct('titleString', 'MDS of  RDMs and models', 'figureNumber', 3));
%  
% for i=1:numel(RDMs_model)
%     models{i}=RDMs_model(i);
% end
% models{end+1} = averageRDMs_true;
% 
% %% statistical inference:
% % test the relatedness and compare the candidate RDMs
% 
% userOptions = userOptions_noisy;
% userOptions.RDMcorrelationType='Kendall_taua';
% userOptions.RDMrelatednessTest = 'subjectRFXsignedRank';
% userOptions.RDMrelatednessThreshold = 0.05;
% userOptions.figureIndex = [10 11];
% userOptions.RDMrelatednessMultipleTesting = 'FDR';
% userOptions.candRDMdifferencesTest = 'subjectRFXsignedRank';
% userOptions.candRDMdifferencesThreshold = 0.05;
% userOptions.candRDMdifferencesMultipleTesting = 'none';
% stats_p_r=compareRefRDM2candRDMs(RDMs_noisy, models, userOptions);